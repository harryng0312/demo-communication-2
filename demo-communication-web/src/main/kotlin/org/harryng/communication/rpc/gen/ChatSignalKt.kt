//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: user.proto

package org.harryng.communication.rpc.gen;

@kotlin.jvm.JvmSynthetic
inline fun chatSignal(block: org.harryng.communication.rpc.gen.ChatSignalKt.Dsl.() -> kotlin.Unit): org.harryng.communication.rpc.gen.ChatSignal =
  org.harryng.communication.rpc.gen.ChatSignalKt.Dsl._create(org.harryng.communication.rpc.gen.ChatSignal.newBuilder()).apply { block() }._build()
object ChatSignalKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: org.harryng.communication.rpc.gen.ChatSignal.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.harryng.communication.rpc.gen.ChatSignal.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.harryng.communication.rpc.gen.ChatSignal = _builder.build()

    /**
     * <code>.org.harryng.communication.grpc.MessageState state = 1;</code>
     */
    var state: org.harryng.communication.rpc.gen.MessageState
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * <code>.org.harryng.communication.grpc.MessageState state = 1;</code>
     */
    fun clearState() {
      _builder.clearState()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun org.harryng.communication.rpc.gen.ChatSignal.copy(block: org.harryng.communication.rpc.gen.ChatSignalKt.Dsl.() -> kotlin.Unit): org.harryng.communication.rpc.gen.ChatSignal =
  org.harryng.communication.rpc.gen.ChatSignalKt.Dsl._create(this.toBuilder()).apply { block() }._build()
